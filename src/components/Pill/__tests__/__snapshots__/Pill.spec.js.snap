// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Pill> component should open dropdown when button is clicked 1`] = `
<Pill
  additionalDropdownProps={Object {}}
  content="Pill content"
  doneLabel="Done"
  dropdownRef={null}
  isContentDefault={false}
  name="Pill name"
  noPaddingInDropdown={false}
  onClear={[MockFunction]}
  ref={null}
>
  <PopupBase
    anchorRef={
      Object {
        "current": <div
          class="PillButton"
        >
          <div
            class="PillButton__label PillButton__label--isActive"
          >
            Pill name
          </div>
          <div
            class="PillButton__pill PillButton__pill--isActive PillButton__pill--isOpen"
            role="button"
            tabindex="0"
          >
            <span>
              Pill content
            </span>
            <button
              class="PillButton__button PillButton__button--isActive PillButton__button--isOpen"
              type="button"
            >
              <svg
                class="PillButton__buttonIcon PillButton__buttonIcon--isActive PillButton__buttonIcon--isOpen"
                fill="currentColor"
                height="1em"
                stroke="currentColor"
                stroke-width="0"
                viewBox="0 0 512 512"
                width="1em"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M256 294.1L383 167c9.4-9.4 24.6-9.4 33.9 0s9.3 24.6 0 34L273 345c-9.1 9.1-23.7 9.3-33.1.7L95 201.1c-4.7-4.7-7-10.9-7-17s2.3-12.3 7-17c9.4-9.4 24.6-9.4 33.9 0l127.1 127z"
                />
              </svg>
            </button>
          </div>
        </div>,
      }
    }
    anchorRenderer={[Function]}
    placement="bottom-start"
    popupRef={
      Object {
        "current": <div
          role="presentation"
        >
          <div
            class="PillDropdown"
            data-popup="true"
            role="dialog"
          >
            <div
              class="PillDropdown__content"
            />
            <div
              class="PillDropdown__footer"
            >
              <button
                class="Button Button--context_primary Button--size_small"
                type="button"
              >
                Done
              </button>
            </div>
          </div>
        </div>,
      }
    }
    popupRenderer={[Function]}
    renderInPortal={false}
  >
    <PillButton
      content="Pill content"
      isContentDefault={false}
      isOpen={true}
      name="Pill name"
      onClear={[MockFunction]}
      toggleDropdown={[Function]}
    >
      <div
        className="PillButton"
      >
        <div
          className="PillButton__label PillButton__label--isActive"
        >
          Pill name
        </div>
        <div
          className="PillButton__pill PillButton__pill--isActive PillButton__pill--isOpen"
          onClick={[Function]}
          onKeyDown={[Function]}
          role="button"
          tabIndex="0"
        >
          <span>
            Pill content
          </span>
          <button
            className="PillButton__button PillButton__button--isActive PillButton__button--isOpen"
            type="button"
          >
            <IoIosArrowDown
              className="PillButton__buttonIcon PillButton__buttonIcon--isActive PillButton__buttonIcon--isOpen"
            >
              <IconBase
                attr={
                  Object {
                    "viewBox": "0 0 512 512",
                  }
                }
                className="PillButton__buttonIcon PillButton__buttonIcon--isActive PillButton__buttonIcon--isOpen"
              >
                <svg
                  className="PillButton__buttonIcon PillButton__buttonIcon--isActive PillButton__buttonIcon--isOpen"
                  fill="currentColor"
                  height="1em"
                  stroke="currentColor"
                  strokeWidth="0"
                  style={
                    Object {
                      "color": undefined,
                    }
                  }
                  viewBox="0 0 512 512"
                  width="1em"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path
                    d="M256 294.1L383 167c9.4-9.4 24.6-9.4 33.9 0s9.3 24.6 0 34L273 345c-9.1 9.1-23.7 9.3-33.1.7L95 201.1c-4.7-4.7-7-10.9-7-17s2.3-12.3 7-17c9.4-9.4 24.6-9.4 33.9 0l127.1 127z"
                    key="0"
                  />
                </svg>
              </IconBase>
            </IoIosArrowDown>
          </button>
        </div>
      </div>
    </PillButton>
    <PillDropdown
      close={[Function]}
      data-popup="true"
      doneLabel="Done"
      noPadding={false}
    >
      <div
        role="presentation"
      >
        <div
          className="PillDropdown"
          data-popup="true"
          role="dialog"
        >
          <div
            className="PillDropdown__content"
          />
          <div
            className="PillDropdown__footer"
          >
            <Button
              context="primary"
              disabled={false}
              href={null}
              isBlock={false}
              isInline={false}
              onClick={[Function]}
              size="small"
              type="button"
            >
              <button
                className="Button Button--context_primary Button--size_small"
                disabled={false}
                onClick={[Function]}
                type="button"
              >
                Done
              </button>
            </Button>
          </div>
        </div>
      </div>
    </PillDropdown>
  </PopupBase>
</Pill>
`;

exports[`<Pill> component should render correctly 1`] = `
<Pill
  additionalDropdownProps={Object {}}
  content="Pill content"
  doneLabel="Done"
  dropdownRef={null}
  isContentDefault={false}
  name="Pill name"
  noPaddingInDropdown={false}
  onClear={[MockFunction]}
  ref={null}
>
  <PopupBase
    anchorRef={
      Object {
        "current": <div
          class="PillButton"
        >
          <div
            class="PillButton__label PillButton__label--isActive"
          >
            Pill name
          </div>
          <div
            class="PillButton__pill PillButton__pill--isActive"
            role="button"
            tabindex="0"
          >
            <span>
              Pill content
            </span>
            <button
              class="PillButton__button PillButton__button--isActive"
              type="button"
            >
              <span
                class="PillButton__buttonIcon PillButton__buttonIcon--isActive"
              >
                ×
              </span>
            </button>
          </div>
        </div>,
      }
    }
    anchorRenderer={[Function]}
    placement="bottom-start"
    popupRef={
      Object {
        "current": null,
      }
    }
    popupRenderer={[Function]}
    renderInPortal={false}
  >
    <PillButton
      content="Pill content"
      isContentDefault={false}
      isOpen={false}
      name="Pill name"
      onClear={[MockFunction]}
      toggleDropdown={[Function]}
    >
      <div
        className="PillButton"
      >
        <div
          className="PillButton__label PillButton__label--isActive"
        >
          Pill name
        </div>
        <div
          className="PillButton__pill PillButton__pill--isActive"
          onClick={[Function]}
          onKeyDown={[Function]}
          role="button"
          tabIndex="0"
        >
          <span>
            Pill content
          </span>
          <button
            className="PillButton__button PillButton__button--isActive"
            onClick={[Function]}
            onKeyDown={[Function]}
            type="button"
          >
            <span
              className="PillButton__buttonIcon PillButton__buttonIcon--isActive"
            >
              ×
            </span>
          </button>
        </div>
      </div>
    </PillButton>
  </PopupBase>
</Pill>
`;
